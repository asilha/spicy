[hilti-trace] : Mini::Test::__parser = [$name="Mini::Test", $parse1=Mini::Test::parse1, $parse2=Mini::Test::parse2, $parse3=Mini::Test::parse3, $type_info=typeinfo(Mini::Test), $description="", $mime_types=vector(), $ports=vector()]; 
[hilti-trace] : spicy_rt::registerParser(Mini::Test::__parser, Null); 
[hilti-trace] : local auto unit = value_ref(default<Mini::Test>())value_ref(default<Mini::Test>()); 
[hilti-trace] : spicy_rt::initializeParsedUnit(gunit, unit, typeinfo(Mini::Test)); 
[hilti-trace] : local view<stream> ncur = cur ? (*cur) : cast<view<stream>>((*data)); 
[hilti-trace] : local int<64> lahead = 0; 
[hilti-trace] : local iterator<stream> lahead_end; 
[hilti-trace] :  # Begin parsing production: Unit: Mini_Test -> f1 f2 
[hilti-trace] : spicy_rt::printParserState("Mini::Test", data, ncur, lahead, lahead_end, "default", True); 
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Unit: Mini_Test -> f1 f2"); 
[hilti-trace] : hilti::debugIndent("spicy-verbose"); 
[hilti-trace] : (ncur, lahead, lahead_end) = (*unit).__parse_stage1(data, ncur, True, lahead, lahead_end); 
[hilti-trace] : try {     hilti::debug("spicy", "Mini::Test");     hilti::debugIndent("spicy");     (*self).__on_0x25_init();      if ( local auto filtered = spicy_rt::filter_init(self, __data, __cur); filtered ) {         local value_ref<stream> filtered_data = filtered;         (*self).__parse_Mini_Test_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);         __cur = __cur.advance(|__cur|);          if ( __trim ) {             hilti::debug("spicy-verbose", "- trimming input");             (*__data).trim(begin(__cur));         }          return (__cur, __lah, __lahe);     }      return (*self).__parse_Mini_Test_stage2(__data, __cur, __trim, __lah, __lahe); } catch ( exception e ) {     (*self).__on_0x25_error();     spicy_rt::filter_disconnect(self);     throw; }  
[hilti-trace] : hilti::debug("spicy", "Mini::Test"); 
[hilti-trace] : hilti::debugIndent("spicy"); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:8:20-13:2: (*self).__on_0x25_init(); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:9:18: hilti::print(self, True); 
[hilti-trace] :  if ( local auto filtered = spicy_rt::filter_init(self, __data, __cur); filtered ) {     local value_ref<stream> filtered_data = filtered;     (*self).__parse_Mini_Test_stage2(filtered_data, (*filtered_data), __trim, __lah, __lahe);     __cur = __cur.advance(|__cur|);      if ( __trim ) {         hilti::debug("spicy-verbose", "- trimming input");         (*__data).trim(begin(__cur));     }      return (__cur, __lah, __lahe); }  
[hilti-trace] : return (*self).__parse_Mini_Test_stage2(__data, __cur, __trim, __lah, __lahe); 
[hilti-trace] :  # Begin parsing production: Variable: f1  -> uint<32> 
[hilti-trace] : spicy_rt::printParserState("Mini::Test", __data, __cur, __lah, __lahe, "default", __trim); 
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Variable: f1  -> uint<32>"); 
[hilti-trace] : hilti::debugIndent("spicy-verbose"); 
[hilti-trace] : spicy_rt::waitForInput(__data, __cur, 4, "expecting 4 bytes for unpacking value", "/Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:10:9", (*self).__filters); 
[hilti-trace] : ((*self).f1, __cur) = (*unpack<uint<32>>((__cur, hilti::ByteOrder::Network))); 
[hilti-trace] :  if ( __trim ) {     hilti::debug("spicy-verbose", "- trimming input");     (*__data).trim(begin(__cur)); }  
[hilti-trace] : hilti::debug("spicy-verbose", "- trimming input"); 
[hilti-trace] : (*__data).trim(begin(__cur)); 
[hilti-trace] : hilti::debugDedent("spicy-verbose"); 
[hilti-trace] : # End parsing production: Variable: f1  -> uint<32>  
[hilti-trace] : hilti::debug("spicy", "f1 = %s" % (*self).f1); 
[hilti-trace] : hilti::debug("spicy-verbose", "- setting field 'f1' to '%s'" % (*self).f1); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:10:5: (*self).__on_f1((*self).f1); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:10:18: hilti::print((*self).f1, True); 
[hilti-trace] :  # Begin parsing production: Variable: f2  -> uint<8> 
[hilti-trace] : spicy_rt::printParserState("Mini::Test", __data, __cur, __lah, __lahe, "default", __trim); 
[hilti-trace] : hilti::debug("spicy-verbose", "- parsing production: Variable: f2  -> uint<8>"); 
[hilti-trace] : hilti::debugIndent("spicy-verbose"); 
[hilti-trace] : spicy_rt::waitForInput(__data, __cur, 1, "expecting 1 bytes for unpacking value", "/Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:11:9", (*self).__filters); 
[hilti-trace] : ((*self).f2, __cur) = (*unpack<uint<8>>((__cur, hilti::ByteOrder::Network))); 
[hilti-trace] :  if ( __trim ) {     hilti::debug("spicy-verbose", "- trimming input");     (*__data).trim(begin(__cur)); }  
[hilti-trace] : hilti::debug("spicy-verbose", "- trimming input"); 
[hilti-trace] : (*__data).trim(begin(__cur)); 
[hilti-trace] : hilti::debugDedent("spicy-verbose"); 
[hilti-trace] : # End parsing production: Variable: f2  -> uint<8>  
[hilti-trace] : hilti::debug("spicy", "f2 = %s" % (*self).f2); 
[hilti-trace] : hilti::debug("spicy-verbose", "- setting field 'f2' to '%s'" % (*self).f2); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:11:5: (*self).__on_f2((*self).f2); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:11:18: hilti::print((*self).f2, True); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:8:20-13:2: (*self).__on_0x25_done(); 
[hilti-trace] /Users/robin/work/spicy/topic2/tests/.tmp/spicy.rt.debug-trace/debug-trace.spicy:12:18: hilti::print(self, True); 
[hilti-trace] : spicy_rt::filter_disconnect(self); 
[hilti-trace] : hilti::debugDedent("spicy"); 
[hilti-trace] : return (__cur, __lah, __lahe); 
[hilti-trace] : hilti::debugDedent("spicy-verbose"); 
[hilti-trace] : # End parsing production: Unit: Mini_Test -> f1 f2  
[hilti-trace] : return ncur; 
